
plugins {
    id 'java-library'
    id "idea"
    id 'jacoco'
    id "com.adarshr.test-logger" version "4.0.0"
    id "com.gradleup.shadow" version "9.0.1"
    id 'signing'
    id "com.github.ben-manes.versions" version "0.52.0"
    id 'net.researchgate.release' version '3.1.0'
    id "com.vanniktech.maven.publish" version "0.34.0"
    id "io.kestra.gradle.inject-bom-versions" version "1.0.0"
}

def isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")

repositories {
    mavenLocal()
    mavenCentral()
    if (isBuildSnapshot) {
        maven { url "https://central.sonatype.com/repository/maven-snapshots/" }
    }
}

final targetJavaVersion = JavaVersion.VERSION_21

java {
    sourceCompatibility = targetJavaVersion
    targetCompatibility = targetJavaVersion
}

group "io.kestra.plugin"
description 'Plugin for AI with Langchain4j for Kestra'

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.compilerArgs.add("-parameters")
}

dependencies {
    // Platform
    implementation enforcedPlatform("dev.langchain4j:langchain4j-bom:$langchain4jVersion")
    annotationProcessor enforcedPlatform("io.kestra:platform:$kestraVersion")
    implementation enforcedPlatform("io.kestra:platform:$kestraVersion")
    api enforcedPlatform("io.kestra:platform:$kestraVersion")

    // lombok
    annotationProcessor "org.projectlombok:lombok"
    compileOnly "org.projectlombok:lombok"

    // kestra
    annotationProcessor group: "io.kestra", name: "processor", version: kestraVersion
    compileOnly group: "io.kestra", name: "core", version: kestraVersion

    // Langchain4j model providers
    implementation "dev.langchain4j:langchain4j"
    implementation "dev.langchain4j:langchain4j-anthropic"
    implementation "dev.langchain4j:langchain4j-azure-open-ai"
    implementation "dev.langchain4j:langchain4j-bedrock"
    implementation "dev.langchain4j:langchain4j-google-ai-gemini"
    implementation "dev.langchain4j:langchain4j-mistral-ai"
    implementation "dev.langchain4j:langchain4j-ollama"
    implementation "dev.langchain4j:langchain4j-open-ai"
    implementation "dev.langchain4j:langchain4j-vertex-ai"
    implementation "dev.langchain4j:langchain4j-vertex-ai-gemini"

    // Langchain4j embeddings stores
    implementation "dev.langchain4j:langchain4j-chroma"
    implementation "dev.langchain4j:langchain4j-elasticsearch"
    implementation "dev.langchain4j:langchain4j-mongodb-atlas"
    implementation "dev.langchain4j:langchain4j-milvus"
    implementation "dev.langchain4j:langchain4j-pinecone"
    implementation "dev.langchain4j:langchain4j-pgvector"
    implementation "dev.langchain4j:langchain4j-community-redis:1.3.0-beta9"
    implementation "dev.langchain4j:langchain4j-qdrant"
    implementation "dev.langchain4j:langchain4j-weaviate"

    // tools
    implementation "dev.langchain4j:langchain4j-web-search-engine-google-custom"
    implementation "dev.langchain4j:langchain4j-web-search-engine-tavily"
    implementation "dev.langchain4j:langchain4j-mcp"

    // agents
    implementation "dev.langchain4j:langchain4j-agentic"
    implementation "dev.langchain4j:langchain4j-agentic-a2a"

    implementation "com.azure:azure-identity" // For Azure OpenAI

    implementation 'org.awaitility:awaitility:4.3.0'
}


/**********************************************************************************************************************\
 * Test
 **********************************************************************************************************************/
test {
    useJUnitPlatform()
}

testlogger {
    theme "mocha-parallel"
    showExceptions true
    showFullStackTraces true
    showStandardStreams true
    showPassedStandardStreams false
    showSkippedStandardStreams true
}

dependencies {
    // Platform
    testAnnotationProcessor enforcedPlatform("io.kestra:platform:$kestraVersion")
    testImplementation enforcedPlatform("io.kestra:platform:$kestraVersion")

    // lombok
    testAnnotationProcessor "org.projectlombok:lombok"
    testCompileOnly 'org.projectlombok:lombok'

    // micronaut
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testAnnotationProcessor "io.micronaut.validation:micronaut-validation-processor"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testImplementation "io.micronaut:micronaut-jackson-databind"

    // test deps needed only for to have a runner
    testAnnotationProcessor group: "io.kestra", name: "processor", version: kestraVersion
    testImplementation group: "io.kestra", name: "core", version: kestraVersion
    testImplementation group: "io.kestra", name: "tests", version: kestraVersion
    testImplementation group: "io.kestra", name: "script", version: kestraVersion
    testImplementation group: "io.kestra", name: "repository-memory", version: kestraVersion
    testImplementation group: "io.kestra", name: "runner-memory", version: kestraVersion
    testImplementation group: "io.kestra", name: "storage-local", version: kestraVersion

    // test
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.hamcrest:hamcrest"
    testImplementation "org.hamcrest:hamcrest-library"
    testImplementation "org.wiremock:wiremock-jetty12"

    testImplementation 'org.testcontainers:ollama:1.21.3'
    testImplementation 'org.testcontainers:elasticsearch:1.21.3'

    // Embeddings stores
    testImplementation 'com.redis.testcontainers:testcontainers-redis:1.6.4'
    testImplementation "dev.langchain4j:langchain4j-embeddings-all-minilm-l6-v2"
    testImplementation 'org.testcontainers:chromadb:1.21.3'
    testImplementation 'org.testcontainers:milvus:1.21.3'
    testImplementation 'org.testcontainers:mongodb:1.21.3'
}

/**********************************************************************************************************************\
 * Allure Reports
 **********************************************************************************************************************/
dependencies {
    testImplementation enforcedPlatform("io.kestra:platform:$kestraVersion")
    testImplementation "io.qameta.allure:allure-junit5"
}

configurations {
    agent {
        canBeResolved = true
        canBeConsumed = true
    }
}

dependencies {
    agent "org.aspectj:aspectjweaver:1.9.24"
}

test {
    jvmArgs = ["-javaagent:${configurations.agent.singleFile}"]
}

/**********************************************************************************************************************\
 * Jacoco
 **********************************************************************************************************************/
test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
}

/**********************************************************************************************************************\
 * Publish
 **********************************************************************************************************************/
mavenPublishing {
    publishToMavenCentral(true)
    signAllPublications()
    coordinates("${project.group}", "${rootProject.name}", "${project.version}")
    pom {
        name = "${project.name}"
        description = "${project.group}:${rootProject.name}:${project.version}"
        url = "https://github.com/kestra-io/${project.name}"
        licenses {
            license {
                name = 'The Apache License, Version 2.0'
                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
        }
        developers {
            developer {
                id = 'tchiotludo'
                name = 'Dehon'
                email = 'ldehon@kestra.io'
            }
        }
        scm {
            connection = 'scm:git:'
            url = "https://github.com/kestra-io/${project.name}"
        }
    }
}

tasks.withType(GenerateModuleMetadata).configureEach {
    // Suppression this validation error as we want to enforce the Kestra platform
    suppressedValidationErrors.add('enforced-platform')
}

jar {
    manifest {
        attributes(
            "X-Kestra-Name": project.name,
            "X-Kestra-Title": "AI",
            "X-Kestra-Group": project.group + ".ai",
            "X-Kestra-Description": project.description,
            "X-Kestra-Version": project.version
        )
    }
}

shadowJar {
    archiveClassifier.set(null)
    mergeServiceFiles()
    zip64 true
}

/**********************************************************************************************************************\
 * Version
 **********************************************************************************************************************/
release {
    preCommitText = 'chore(version):'
    preTagCommitMessage = 'update to version'
    tagCommitMessage = 'tag version'
    newVersionCommitMessage = 'update snapshot version'
    tagTemplate = 'v${version}'
    buildTasks = ['classes']
    git {
        requireBranch.set('master')
    }
}

/**********************************************************************************************************************\
 * Dev
 **********************************************************************************************************************/
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
